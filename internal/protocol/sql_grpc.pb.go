// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SQLClient is the client API for SQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQLClient interface {
	Conn(ctx context.Context, opts ...grpc.CallOption) (SQL_ConnClient, error)
}

type sQLClient struct {
	cc grpc.ClientConnInterface
}

func NewSQLClient(cc grpc.ClientConnInterface) SQLClient {
	return &sQLClient{cc}
}

func (c *sQLClient) Conn(ctx context.Context, opts ...grpc.CallOption) (SQL_ConnClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SQL_serviceDesc.Streams[0], "/protocol.SQL/Conn", opts...)
	if err != nil {
		return nil, err
	}
	x := &sQLConnClient{stream}
	return x, nil
}

type SQL_ConnClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type sQLConnClient struct {
	grpc.ClientStream
}

func (x *sQLConnClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sQLConnClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SQLServer is the server API for SQL service.
// All implementations must embed UnimplementedSQLServer
// for forward compatibility
type SQLServer interface {
	Conn(SQL_ConnServer) error
	mustEmbedUnimplementedSQLServer()
}

// UnimplementedSQLServer must be embedded to have forward compatible implementations.
type UnimplementedSQLServer struct {
}

func (UnimplementedSQLServer) Conn(SQL_ConnServer) error {
	return status.Errorf(codes.Unimplemented, "method Conn not implemented")
}
func (UnimplementedSQLServer) mustEmbedUnimplementedSQLServer() {}

// UnsafeSQLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQLServer will
// result in compilation errors.
type UnsafeSQLServer interface {
	mustEmbedUnimplementedSQLServer()
}

func RegisterSQLServer(s grpc.ServiceRegistrar, srv SQLServer) {
	s.RegisterService(&_SQL_serviceDesc, srv)
}

func _SQL_Conn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SQLServer).Conn(&sQLConnServer{stream})
}

type SQL_ConnServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type sQLConnServer struct {
	grpc.ServerStream
}

func (x *sQLConnServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sQLConnServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SQL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.SQL",
	HandlerType: (*SQLServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Conn",
			Handler:       _SQL_Conn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sql.proto",
}
